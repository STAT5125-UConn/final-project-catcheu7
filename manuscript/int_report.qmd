---
title: Interim Report
author: Catherine Cheu
date: April 13, 2023
embed-resources: true
jupyter: python3
---

# Introduction

# Methods

## Data Acquisition

All diabetes incidence rates are obtained from the CDC site. The map is obtained through open source in Kaggle.

# Results

## Animation

```{python}
import geopandas, pandas, matplotlib, numpy, csv, glob, shapely, sklearn
from matplotlib import rc
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt

rc('animation', html = 'jshtml')

files = glob.glob("../data/*.csv")
sugar = glob.glob("../data/sugar_data/*.csv")
pdfs = []
sdfs = []

for a in range(0,len(files)):
	b = pandas.read_csv(files[a], skiprows = 2)
	c = pandas.read_csv(sugar[a],skiprows = 2)
	pdfs.append(b)
	sdfs.append(c)

geous = geopandas.read_file("../data/us-states.json").rename(columns = {'name':'State'})

figure, [[ax,ax2,ax3], [ax4,ax5,ax6]] = plt.subplots(2,3,figsize = (10,10))

cbar = plt.cm.ScalarMappable(cmap = 'cool', norm = plt.Normalize(vmin = 7, vmax = 14))

plt.colorbar(cbar)

def up(z):
	gm = geous.merge(pdfs[z], on = 'State')
	su = geous.merge(sdfs[z], on = 'State')
	akg = gm[gm['State'].isin(['Alaska'])]
	aks = su[su['State'].isin(['Alaska'])]
	akg.plot(column = 'Percentage', cmap = 'cool', ax = ax2, vmin = 7, vmax = 14)
	aks.plot(column = 'Percentage', cmap = 'cool', ax = ax5, vmin = 40, vmax = 80)
	ax2.set_xlim(-170,-140)
	#akg.plot(column = 'Percentage', cmap = 'cool', ax = ax)
	ax5.set_xlim(-170,-140)
	hi = gm[gm['State'].isin(['Hawaii'])]
	hs = su[su['State'].isin(['Hawaii'])]
	hi.plot(column = 'Percentage', cmap = 'cool', ax = ax3, vmin = 7, vmax = 14)

	hs.plot(column = 'Percentage', cmap = 'cool', ax = ax6, vmin = 40, vmax = 80)
	cont = gm[~gm['State'].isin(['Alaska', 'Hawaii'])]
	cs = su[~su['State'].isin(['Alaska', 'Hawaii'])]
	cont.plot(column = 'Percentage', cmap = 'cool', ax = ax,vmin = 7,vmax = 14)

	cs.plot(column = 'Percentage', cmap = 'cool', ax = ax4,vmin = 40,vmax = 80)

	#cont.plot(column = 'Percentage', cmap = 'cool', ax = ax4)
	#cont.plot(column = 'Percentage', cmap = 'cool', ax = ax7)
	#cont.plot(column = 'Percentage', cmap = 'cool', ax = ax10)

anim = FuncAnimation(figure, up, frames = 10, interval = 1000)
plt.close()

anim
```